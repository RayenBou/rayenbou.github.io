"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[130],{7735:e=>{e.exports=JSON.parse('{"archive":{"blogPosts":[{"id":"Une-intro","metadata":{"permalink":"/blog/Une-intro","source":"@site/blog/01/une-intro/index.md","title":"Une intro","description":"Pourquoi Docusaurus ? Car si je cr\xe9e un blog, il risque de se transformer en CRM avec environ 45 fonctionnalit\xe9s. C\'est mieux comme \xe7a !","date":"2024-07-10T14:11:50.000Z","tags":[{"inline":true,"label":"intro","permalink":"/blog/tags/intro"}],"readingTime":0.385,"hasTruncateMarker":false,"authors":[{"name":"Boumaza Rayen","title":"D\xe9veloppeur PHP/Symfony | Formateur Passionn\xe9 | Geek \xe0 Plein Temps","url":"https://github.com/RayenBou","imageURL":"https://github.com/RayenBou.png","key":"rayen"}],"frontMatter":{"slug":"Une-intro","title":"Une intro","authors":"rayen","tags":["intro"]},"unlisted":false,"nextItem":{"title":"Upload de fichier - Public ou non public sur Symfony ? ?","permalink":"/blog/upload-de-fichier-public-ou-non-public-symfony"}},"content":"Pourquoi Docusaurus ? Car si je cr\xe9e un blog, il risque de se transformer en CRM avec environ 45 fonctionnalit\xe9s. C\'est mieux comme \xe7a !\\n\\nJe suis Rayen, un d\xe9veloppeur/nerd enthousiaste d\'une multitude de sujets, et ce blog a vocation \xe0 r\xe9unir les id\xe9es et sujets que je parcours dans mes projets et/ou dans les cours que je donne.\\n\\nIl ne s\'agit que d\'une grande piscine \xe0 r\xe9flexion. Certains articles seront en anglais et d\'autres en fran\xe7ais."},{"id":"upload-de-fichier-public-ou-non-public-symfony","metadata":{"permalink":"/blog/upload-de-fichier-public-ou-non-public-symfony","source":"@site/blog/02/public-ou-non-public-symfony/index.md","title":"Upload de fichier - Public ou non public sur Symfony ? ?","description":"Pourquoi ce questionnement ?","date":"2024-07-10T14:11:50.000Z","tags":[{"inline":false,"label":"symfony","permalink":"/blog/tags/symfony","description":"symfony tag description"},{"inline":false,"label":"security","permalink":"/blog/tags/security","description":"security tag description"}],"readingTime":2.845,"hasTruncateMarker":false,"authors":[{"name":"Boumaza Rayen","title":"D\xe9veloppeur PHP/Symfony | Formateur Passionn\xe9 | Geek \xe0 Plein Temps","url":"https://github.com/RayenBou","imageURL":"https://github.com/RayenBou.png","key":"rayen"}],"frontMatter":{"slug":"upload-de-fichier-public-ou-non-public-symfony","title":"Upload de fichier - Public ou non public sur Symfony ? ?","authors":"rayen","tags":["symfony","security"]},"unlisted":false,"prevItem":{"title":"Une intro","permalink":"/blog/Une-intro"}},"content":"## ***Pourquoi ce questionnement ?***\\r\\n\\r\\nJ\'ai \xe9t\xe9 confront\xe9 \xe0 une probl\xe9matique assez particuli\xe8re concernant l\'upload de fichiers sur Symfony il y a 6 mois de cela.\\r\\n\\r\\nDurant mon apprentissage, il m\'avait \xe9t\xe9 dit, par un d\xe9veloppeur senior, que l\'upload de fichiers sur Symfony \xe9tait soit dans le dossier public, soit dans le dossier var.\\r\\n\\r\\nPour le contexte : \xe0 plusieurs reprises, sur des projets clients assez simples, je leur fournis un formulaire pour uploader des images, PDF, Word, etc.\\r\\n\\r\\nJ\'avais beau retourner la documentation de Symfony ou des bundles, je ne comprenais pas d\'o\xf9 venait le `var/` dont on me parlait et quelle utilit\xe9 cela pouvait avoir.\\r\\n\\r\\n[How to upload a file](https://symfony.com/doc/current/controller/upload_file.html).\\r\\n\\r\\n```yaml\\r\\n# config/services.yaml\\r\\n\\r\\n# ...\\r\\nparameters:\\r\\n    brochures_directory: \'%kernel.project_dir%/public/uploads/brochures\'\\r\\n```\\r\\n\\r\\n*Dans le dossier public*\\r\\n\\r\\n---------\\r\\nCelle de VichUploader\\r\\n\\r\\n[VichUploader](https://github.com/dustin10/VichUploaderBundle/blob/master/docs/usage.md)\\r\\n\\r\\n```yaml\\r\\n# config/packages/vich_uploader.yaml or app/config/config.yml\\r\\nvich_uploader:\\r\\n    db_driver: orm\\r\\n\\r\\n    metadata:\\r\\n        type: attribute\\r\\n\\r\\n    mappings:\\r\\n        products:\\r\\n            uri_prefix: /images/products\\r\\n            upload_destination: \'%kernel.project_dir%/public/images/products\'\\r\\n            namer: Vich\\\\UploaderBundle\\\\Naming\\\\SmartUniqueNamer\\r\\n```\\r\\n\\r\\n*Toujours dans le dossier public*\\r\\n\\r\\n---------\\r\\n\\r\\n[Upload in Form](https://symfonycasts.com/screencast/symfony-uploads/upload-in-form)\\r\\n\\r\\n```php\\r\\n/** @var UploadedFile $uploadedFile */\\r\\n$uploadedFile = $form[\'imageFile\']->getData();\\r\\n$destination = $this->getParameter(\'kernel.project_dir\').\'/public/uploads/article_image\';\\r\\n```\\r\\n\\r\\n*Encore dans le dossier public ?*\\r\\n\\r\\n## ***Boh \xe7a ne doit pas etre si terrible, si ?***\\r\\n\\r\\n- Postulat :  \\r\\nLe dossier `/public` met \xe0 disposition de mani\xe8re **publique** les ressources.\\r\\n\\r\\n- Question :  \\r\\nLes ressources sont-elles toujours publiques ?\\r\\n\\r\\n- R\xe9ponse :  \\r\\nLes factures d\'un client ne sont certainement pas publiques :D\\r\\n\\r\\nAvec l\'aide de Guillaume (un acolyte dev), nous nous mettons \xe0 la recherche d\'un maximum d\'informations \xe0 ce sujet et nous constatons plusieurs choses :\\r\\n\\r\\nLa d\xe9finition exacte du dossier public implique qu\'il s\'agisse d\'un dossier ne servant qu\'aux ressources statiques.  \\r\\nLes documentations d\'autres frameworks poussent par ailleurs \xe0 uploader les fichiers dans un dossier en dehors du public.\\r\\n\\r\\nIl y a une multitude d\'arguments de s\xe9curit\xe9 qui confirment qu\'on devrait \xe9viter donc l\'upload dans le public au profit d\'un dossier non accessible publiquement. Et dans la logique cloud, une telle pratique permet plus facilement la scalabilit\xe9.\\r\\n\\r\\n**L\'OWASP s\'en m\xeale !**\\r\\n\\r\\n[File Upload Cheat Sheet](https://cheatsheetseries.owasp.org/cheatsheets/File_Upload_Cheat_Sheet.html)\\r\\n\\r\\n```txt\\r\\nStore the files on a different server. \\r\\nIf that\'s not possible, store them outside of the webroot\\r\\nIn the case of public access to the files, \\r\\nuse a handler that gets mapped to filenames inside the application (someid -> file.ext)\\r\\n```\\r\\n\\r\\nD\'autres articles trouv\xe9s confirment la reflexion:\\r\\n\\r\\n[Why is putting the image folder in the public directory of a web server not secure?](https://www.quora.com/Why-is-putting-the-image-folder-in-the-public-directory-of-a-web-server-not-secure-The-front-controller-should-already-take-care-of-public-folder-security)\\r\\n\\r\\n[Why shouldn\u2019t I upload files in the public directory?](https://forums.meteor.com/t/why-shouldnt-i-upload-files-in-the-public-directory/36899/3)\\r\\n\\r\\n## ***Quel est la solution ?***\\r\\n\\r\\nComment est-il donc possible de servir les ressources sans pour autant compromettre la securit\xe9, tout en ayant un impact minimum sur la modification de la codebase ?\\r\\n\\r\\nTout n\'est pas \xe0 jeter evidemment. La methode `asset()` de twig permet d\'acceder au dossier `/public` qui ne sert **QUE** les ressources statiques du site.\\r\\nPour le reste , ca ira dans le dossier `/var` !\\r\\n\\r\\n**Dans mon services.yaml:**\\r\\n\\r\\n```yaml\\r\\nparameters:\\r\\n    var_file_dir: \\"%kernel.project_dir%/var/upload/\\"\\r\\n```\\r\\n\\r\\n**Dans un Controller:**\\r\\n\\r\\n```php\\r\\n\\r\\n#[Route(\'/file/{folder}/{filename}\', name: \'app_file\', methods: [\'GET\'])]\\r\\npublic function serveImage(string $folder, string $filename): BinaryFileResponse\\r\\n{\\r\\n    $fileDir = $this->getParameter(\'var_file_dir\') ?? null;\\r\\n    if (null === $fileDir) {\\r\\n        throw new \\\\Exception(\'Parameter \\"var_file_dir\\" is not set.\');\\r\\n    }\\r\\n\\r\\n    $filePath = $fileDir . $folder . \'/\' . $filename;\\r\\n    if (!file_exists($filePath)) {\\r\\n        throw $this->createNotFoundException(\\"the file does not exist.\\");\\r\\n    }\\r\\n    return new BinaryFileResponse($filePath);\\r\\n}\\r\\n```\\r\\n\\r\\n**Dans mon Twig:**\\r\\n\\r\\n```html\\r\\n<img src=\\"{{ path(\'app_file\', {\'folder\': \'gallery\', \'filename\': image.reference}) }}\\">\\r\\n```\\r\\n\\r\\n\\\\\\r\\n\\\\\\r\\n**Ce qui donne une structure comme cel\xe0, \xe0 l\'abri des regards !**\\\\\\r\\n\\\\\\r\\n![Var folder](./img/var-folder.png)"}]}}')}}]);